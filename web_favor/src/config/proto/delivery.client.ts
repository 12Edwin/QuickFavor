// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "delivery.proto" (package "delivery", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DeliveryService } from "./delivery";
import type { UpdateDriverLocation } from "./delivery";
import type { DriverLocation } from "./delivery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SearchDriversResponse } from "./delivery";
import type { SearchDriversRequest } from "./delivery";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service delivery.DeliveryService
 */
export interface IDeliveryServiceClient {
    /**
     * Búsqueda de repartidores
     *
     * @generated from protobuf rpc: SearchDrivers(delivery.SearchDriversRequest) returns (stream delivery.SearchDriversResponse);
     */
    searchDrivers(input: SearchDriversRequest, options?: RpcOptions): ServerStreamingCall<SearchDriversRequest, SearchDriversResponse>;
    /**
     * Streaming para repartidores activos
     *
     * @generated from protobuf rpc: updateDriverLocation(delivery.DriverLocation) returns (stream delivery.UpdateDriverLocation);
     */
    updateDriverLocation(input: DriverLocation, options?: RpcOptions): ServerStreamingCall<DriverLocation, UpdateDriverLocation>;
}
/**
 * @generated from protobuf service delivery.DeliveryService
 */
export class DeliveryServiceClient implements IDeliveryServiceClient, ServiceInfo {
    typeName = DeliveryService.typeName;
    methods = DeliveryService.methods;
    options = DeliveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Búsqueda de repartidores
     *
     * @generated from protobuf rpc: SearchDrivers(delivery.SearchDriversRequest) returns (stream delivery.SearchDriversResponse);
     */
    searchDrivers(input: SearchDriversRequest, options?: RpcOptions): ServerStreamingCall<SearchDriversRequest, SearchDriversResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchDriversRequest, SearchDriversResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Streaming para repartidores activos
     *
     * @generated from protobuf rpc: updateDriverLocation(delivery.DriverLocation) returns (stream delivery.UpdateDriverLocation);
     */
    updateDriverLocation(input: DriverLocation, options?: RpcOptions): ServerStreamingCall<DriverLocation, UpdateDriverLocation> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DriverLocation, UpdateDriverLocation>("serverStreaming", this._transport, method, opt, input);
    }
}
