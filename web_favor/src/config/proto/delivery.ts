// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "delivery.proto" (package "delivery", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message delivery.SearchDriversRequest
 */
export interface SearchDriversRequest {
    /**
     * @generated from protobuf field: string no_order = 1;
     */
    noOrder: string;
    /**
     * @generated from protobuf field: delivery.DeliveryPoint delivery_point = 2;
     */
    deliveryPoint?: DeliveryPoint;
    /**
     * @generated from protobuf field: float search_radius_km = 4;
     */
    searchRadiusKm: number;
}
/**
 * @generated from protobuf message delivery.SearchDriversResponse
 */
export interface SearchDriversResponse {
    /**
     * @generated from protobuf field: string no_courier = 1;
     */
    noCourier: string;
    /**
     * @generated from protobuf field: string courier_name = 2;
     */
    courierName: string;
    /**
     * @generated from protobuf field: double lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lng = 4;
     */
    lng: number;
    /**
     * @generated from protobuf field: string status = 5;
     */
    status: string;
}
/**
 * @generated from protobuf message delivery.DeliveryPoint
 */
export interface DeliveryPoint {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lng = 3;
     */
    lng: number;
}
/**
 * @generated from protobuf message delivery.DriverLocation
 */
export interface DriverLocation {
    /**
     * @generated from protobuf field: string no_courier = 1;
     */
    noCourier: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lng = 3;
     */
    lng: number;
    /**
     * @generated from protobuf field: int64 distance_km = 4;
     */
    distanceKm: bigint;
    /**
     * @generated from protobuf field: string fcm_token = 5;
     */
    fcmToken: string;
}
/**
 * @generated from protobuf message delivery.UpdateDriverLocation
 */
export interface UpdateDriverLocation {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SearchDriversRequest$Type extends MessageType<SearchDriversRequest> {
    constructor() {
        super("delivery.SearchDriversRequest", [
            { no: 1, name: "no_order", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "delivery_point", kind: "message", T: () => DeliveryPoint },
            { no: 4, name: "search_radius_km", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SearchDriversRequest>): SearchDriversRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.noOrder = "";
        message.searchRadiusKm = 0;
        if (value !== undefined)
            reflectionMergePartial<SearchDriversRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchDriversRequest): SearchDriversRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string no_order */ 1:
                    message.noOrder = reader.string();
                    break;
                case /* delivery.DeliveryPoint delivery_point */ 2:
                    message.deliveryPoint = DeliveryPoint.internalBinaryRead(reader, reader.uint32(), options, message.deliveryPoint);
                    break;
                case /* float search_radius_km */ 4:
                    message.searchRadiusKm = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchDriversRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string no_order = 1; */
        if (message.noOrder !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.noOrder);
        /* delivery.DeliveryPoint delivery_point = 2; */
        if (message.deliveryPoint)
            DeliveryPoint.internalBinaryWrite(message.deliveryPoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float search_radius_km = 4; */
        if (message.searchRadiusKm !== 0)
            writer.tag(4, WireType.Bit32).float(message.searchRadiusKm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message delivery.SearchDriversRequest
 */
export const SearchDriversRequest = new SearchDriversRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchDriversResponse$Type extends MessageType<SearchDriversResponse> {
    constructor() {
        super("delivery.SearchDriversResponse", [
            { no: 1, name: "no_courier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "courier_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "lng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchDriversResponse>): SearchDriversResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.noCourier = "";
        message.courierName = "";
        message.lat = 0;
        message.lng = 0;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<SearchDriversResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchDriversResponse): SearchDriversResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string no_courier */ 1:
                    message.noCourier = reader.string();
                    break;
                case /* string courier_name */ 2:
                    message.courierName = reader.string();
                    break;
                case /* double lat */ 3:
                    message.lat = reader.double();
                    break;
                case /* double lng */ 4:
                    message.lng = reader.double();
                    break;
                case /* string status */ 5:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchDriversResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string no_courier = 1; */
        if (message.noCourier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.noCourier);
        /* string courier_name = 2; */
        if (message.courierName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.courierName);
        /* double lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit64).double(message.lat);
        /* double lng = 4; */
        if (message.lng !== 0)
            writer.tag(4, WireType.Bit64).double(message.lng);
        /* string status = 5; */
        if (message.status !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message delivery.SearchDriversResponse
 */
export const SearchDriversResponse = new SearchDriversResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeliveryPoint$Type extends MessageType<DeliveryPoint> {
    constructor() {
        super("delivery.DeliveryPoint", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<DeliveryPoint>): DeliveryPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.lat = 0;
        message.lng = 0;
        if (value !== undefined)
            reflectionMergePartial<DeliveryPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeliveryPoint): DeliveryPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lng */ 3:
                    message.lng = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeliveryPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lng = 3; */
        if (message.lng !== 0)
            writer.tag(3, WireType.Bit64).double(message.lng);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message delivery.DeliveryPoint
 */
export const DeliveryPoint = new DeliveryPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverLocation$Type extends MessageType<DriverLocation> {
    constructor() {
        super("delivery.DriverLocation", [
            { no: 1, name: "no_courier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "distance_km", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "fcm_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverLocation>): DriverLocation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.noCourier = "";
        message.lat = 0;
        message.lng = 0;
        message.distanceKm = 0n;
        message.fcmToken = "";
        if (value !== undefined)
            reflectionMergePartial<DriverLocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverLocation): DriverLocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string no_courier */ 1:
                    message.noCourier = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lng */ 3:
                    message.lng = reader.double();
                    break;
                case /* int64 distance_km */ 4:
                    message.distanceKm = reader.int64().toBigInt();
                    break;
                case /* string fcm_token */ 5:
                    message.fcmToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverLocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string no_courier = 1; */
        if (message.noCourier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.noCourier);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lng = 3; */
        if (message.lng !== 0)
            writer.tag(3, WireType.Bit64).double(message.lng);
        /* int64 distance_km = 4; */
        if (message.distanceKm !== 0n)
            writer.tag(4, WireType.Varint).int64(message.distanceKm);
        /* string fcm_token = 5; */
        if (message.fcmToken !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fcmToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message delivery.DriverLocation
 */
export const DriverLocation = new DriverLocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDriverLocation$Type extends MessageType<UpdateDriverLocation> {
    constructor() {
        super("delivery.UpdateDriverLocation", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDriverLocation>): UpdateDriverLocation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateDriverLocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDriverLocation): UpdateDriverLocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDriverLocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message delivery.UpdateDriverLocation
 */
export const UpdateDriverLocation = new UpdateDriverLocation$Type();
/**
 * @generated ServiceType for protobuf service delivery.DeliveryService
 */
export const DeliveryService = new ServiceType("delivery.DeliveryService", [
    { name: "SearchDrivers", serverStreaming: true, options: {}, I: SearchDriversRequest, O: SearchDriversResponse },
    { name: "updateDriverLocation", serverStreaming: true, options: {}, I: DriverLocation, O: UpdateDriverLocation }
]);
